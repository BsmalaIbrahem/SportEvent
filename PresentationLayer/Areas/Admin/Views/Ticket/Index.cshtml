@using CoreLayer.Enums
@using Microsoft.AspNetCore.Routing
@model ModelsWithPaginationVM<Ticket>

<div class="col-lg-12 grid-margin stretch-card">
    <div class="card">
        <div class="card-body">
            <h4 class="card-title">Tickets</h4>

            <!-- Filters -->
            <div class="d-flex justify-content-between mb-3">
                <!-- Page Size Dropdown -->
                <div class="dropdown">
                    <button class="btn dropdown-toggle" style="border: 1px solid #444;" type="button" id="sizeButton"
                            data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        @(Model.Pagination.PageSize != 0 ? Model.Pagination.PageSize : "Page Size")
                    </button>
                    <div class="dropdown-menu" aria-labelledby="sizeButton">
                        @{
                            int[] PageSizes = new[] { 5, 10, 15, 20 };
                        }
                        @foreach (var size in PageSizes)
                        {
                            <a class="dropdown-item" href="@Url.Action("Index",
                            new RouteValueDictionary {
                                { "PageFilter.PageNumber", Model.Pagination.PageNumber },
                                { "PageFilter.PageSize", size },
                                { "Status", ViewBag.Status }
                                })">@size</a>
                             }
                    </div>
                </div>

                <!-- Status Dropdown -->
                <div class="dropdown">
                    <button class="btn dropdown-toggle" style="border: 1px solid #444;" type="button" id="statusButton"
                            data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        @(ViewBag.Status == null ? "All" : ViewBag.Status.ToString())
                    </button>
                    <div class="dropdown-menu" aria-labelledby="statusButton">
                        <a class="dropdown-item" href="@Url.Action("Index",
                            new RouteValueDictionary {
                                { "PageFilter.PageNumber", Model.Pagination.PageNumber },
                                { "PageFilter.PageSize", Model.Pagination.PageSize },
                                { "Status", null }
                            })">All</a>
                        @foreach (var status in Enum.GetValues(typeof(TicketStatus)))
                        {
                            <a class="dropdown-item" href="@Url.Action("Index",
                                new RouteValueDictionary {
                            { "PageFilter.PageNumber", Model.Pagination.PageNumber },
                            { "PageFilter.PageSize", Model.Pagination.PageSize },
                            { "Status", status }
                                })">@status</a>
                            }
                    </div>
                </div>
            </div>

            <!-- Tickets Table -->
            <div class="table-responsive">
                <table class="table table-dark">
                    <thead>
                        <tr>
                            <th>#</th>
                            <th>Match</th>
                            <th>Match Date</th>
                            <th>User</th>
                            <th>User Phone</th>
                            <th>Price</th>
                            <th>Status</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (!Model.Items.Any())
                        {
                            <tr>
                                <td colspan="7" class="text-center">No tickets found.</td>
                            </tr>
                        }
                        else
                        {
                            foreach (var item in Model.Items)
                            {
                                <tr>
                                    <td><strong>@item.Id</strong></td>
                                    <td>@item.Match.HomeTeam.Name VS @item.Match.AwayTeam.Name</td>
                                    <td>@item.Match.MatchDate</td>
                                    <td>@item.User.UserName</td>
                                    <td>@item.User.PhoneNumber</td>
                                    <td>@item.Price</td>
                                    <td>@item.Status</td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>

            <!-- Pagination -->
            <div class="card-footer d-flex justify-content-center">
                @if (Model.Pagination.TotalPages > 1)
                {
                    <nav aria-label="Page navigation">
                        <ul class="pagination">
                            @{
                                var cur = Model.Pagination.PageNumber;
                                var sz = Model.Pagination.PageSize;
                                var tot = Model.Pagination.TotalPages;
                                var maxShow = 5;
                                var start = Math.Max(1, cur - maxShow / 2);
                                var end = Math.Min(tot, start + maxShow - 1);
                                if (end - start < maxShow - 1) start = Math.Max(1, end - maxShow + 1);
                            }

                            @if (Model.Pagination.HasPreviousPage)
                            {
                                <li class="page-item">
                                    <a class="page-link" href="@Url.Action("Index",
                                    new RouteValueDictionary {
                                    { "PageFilter.PageNumber", cur - 1 },
                                    { "PageFilter.PageSize", sz },
                                    { "Status", ViewBag.Status }
                                    })">&laquo;</a>
                        </li>
                            }

                            @if (start > 1)
                            {
                                <li class="page-item">
                                    <a class="page-link" href="@Url.Action("Index",
                                                new RouteValueDictionary {
                                    { "PageFilter.PageNumber", 1 },
                                    { "PageFilter.PageSize", sz },
                                    { "Status", ViewBag.Status }
                                    })">1</a>
                        </li>
                        @if (start > 2)
                                {
                                    <li class="page-item disabled"><span class="page-link">...</span></li>
                                }
                            }

                            @for (var i = start; i <= end; i++)
                            {
                                <li class="page-item @(cur == i ? "active" : "")">
                                    <a class="page-link" href="@Url.Action("Index",
                                                 new RouteValueDictionary {
                                     { "PageFilter.PageNumber", i },
                                     { "PageFilter.PageSize", sz },
                                     { "Status", ViewBag.Status }
                                    })">@i</a>
                        </li>
                            }

                            @if (end < tot)
                            {
                                if (end < tot - 1)
                                {
                                    <li class="page-item disabled"><span class="page-link">...</span></li>
                                }
                                <li class="page-item">
                                    <a class="page-link" href="@Url.Action("Index",
                                               new RouteValueDictionary {
                                   { "PageFilter.PageNumber", tot },
                                   { "PageFilter.PageSize", sz },
                                   { "Status", ViewBag.Status }
                                    })">@tot</a>
                        </li>
                               }

                            @if (Model.Pagination.HasNextPage)
                            {
                                <li class="page-item">
                                    <a class="page-link" href="@Url.Action("Index",
                                                new RouteValueDictionary {
                                    { "PageFilter.PageNumber", cur + 1 },
                                    { "PageFilter.PageSize", sz },
                                    { "Status", ViewBag.Status }
                                    })">&raquo;</a>
                        </li>
                             }
                        </ul>
                    </nav>
                }
            </div>

        </div>
    </div>
</div>
