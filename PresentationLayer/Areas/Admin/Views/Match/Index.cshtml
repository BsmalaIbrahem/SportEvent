@using CoreLayer.Helpers
@model ModelsWithPaginationVM<Match>

<style>
    .pagination .page-link {
        padding: 4px 12px; /* صغر الارتفاع */
        line-height: 5; /* يرفع الرقم لفوق شوية */
        margin: 0 2px; /* تباعد بسيط بين الأزرار */
    }

</style>

<div style="text-align:right; margin-top:30px; margin-right:20px;">
    <a asp-action="Create" class="btn btn-primary">Create</a>
</div>

<div class="col-lg-12 grid-margin stretch-card">
    <div class="card">
        <div class="card-body">
            <h4 class="card-title">Matches</h4>
            <div class="dropdown" style="margin-bottom: 1.125rem;">
                <button class="btn  dropdown-toggle" style="border: 1px solid #444;" type="button" id="dropdownMenuButton2" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    @( Model.Pagination.PageSize != 0 ?  Model.Pagination.PageSize: "Page Size")
                </button>
                <div class="dropdown-menu" aria-labelledby="dropdownMenuButton2">
                    @{
                        int[] PageSizes = new int[] { 5, 10, 15, 20 };
                    }
                    @for (var j = 0; j < PageSizes.Length; j++)
                    {
                        <a class="dropdown-item" href="@Url.Action("Index", new { PageSize = PageSizes[j] })">@PageSizes[j]</a>
                    }
                </div>
            </div>


            <div class="table-responsive">
                <table class="table table-dark">
                    <thead>
                        <tr>
                            <th>#</th>
                            <th>Home Team</th>
                            <th>Away Team</th>
                            <th>Tournament</th>
                            <th>Status</th>
                            <th>Date Time</th>
                            <th>Available Tickets</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model.Items)
                        {
                            <tr>
                                <td><i class="fab fa-angular fa-lg text-danger me-3"></i> <strong>@item.Id</strong></td>
                                <td>@item.HomeTeam.Name (Score : @item.HomeScore)</td>
                                <td>@item.AwayTeam.Name (Score : @item.AwayScore)</td>
                                <th>@item.Tournament.Title.GetDisplayName()</th>
                                <th>@item.Status</th>
                                <th>@item.MatchDate</th>
                                <th>@item.AvailableTickets</th>
                                <td>
                                    <div>
                                        <a asp-action="Edit" asp-route-id="@item.Id" class="btn p-0">
                                            <i class="mdi mdi-lead-pencil"></i>
                                        </a>
                                    </div>
                                </td>
                            </tr>
                        }


                    </tbody>
                </table>
            </div>
        </div>
        <div class="w-100 d-flex justify-content-center mt-2 mb-3">
            <nav aria-label="Page navigation">
                <ul class="pagination">
                    @{
                        var currentPage = Model.Pagination.PageNumber;
                        var pageSize = Model.Pagination.PageSize;
                        var totalPages = Model.Pagination.TotalPages;
                        var maxPagesToShow = 5;

                        var startPage = Math.Max(1, currentPage - maxPagesToShow / 2);
                        var endPage = Math.Min(totalPages, startPage + maxPagesToShow - 1);

                        if (endPage - startPage < maxPagesToShow - 1)
                        {
                            startPage = Math.Max(1, endPage - maxPagesToShow + 1);
                        }
                    }

                    @if (Model.Pagination.HasPreviousPage)
                    {
                        <li class="page-item">
                            <a class="page-link" href="@Url.Action("Index", new { PageNumber = currentPage - 1, PageSize = pageSize })">
                                &laquo;
                            </a>
                        </li>
                    }

                    @if (startPage > 1)
                    {
                        <li class="page-item">
                            <a class="page-link" href="@Url.Action("Index", new { PageNumber = 1, PageSize = pageSize })">1</a>
                        </li>
                        @if (startPage > 2)
                        {
                            <li class="page-item disabled"><span class="page-link">...</span></li>
                        }
                    }

                    @for (var i = startPage; i <= endPage; i++)
                    {
                        <li class="page-item @(currentPage == i ? "active" : "")">
                            <a class="page-link" href="@Url.Action("Index", new { PageNumber = i, PageSize = pageSize })">@i</a>
                        </li>
                    }

                    @if (endPage < totalPages)
                    {
                        @if (endPage < totalPages - 1)
                        {
                            <li class="page-item disabled"><span class="page-link">...</span></li>
                        }
                        <li class="page-item">
                            <a class="page-link" href="@Url.Action("Index", new { PageNumber = totalPages, PageSize = pageSize })">@totalPages</a>
                        </li>
                    }

                    @if (Model.Pagination.HasNextPage)
                    {
                        <li class="page-item">
                            <a class="page-link" href="@Url.Action("Index", new { PageNumber = currentPage + 1, PageSize = pageSize })">
                                &raquo;
                            </a>
                        </li>
                    }
                </ul>
            </nav>
        </div>


    </div>
</div>

